{"version":3,"file":"main.db59c0d524a9f93d99ca.bundle.js","sources":["webpack:///./src/DayPicker.js"],"sourcesContent":["import React, { Component } from \"react\";\n\nconst MONTHS = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\"\n];\nconst DAYS_LONG = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\"\n];\nconst DAYS_SHORT = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\nexport default class DayPicker extends Component {\n  constructor(props) {\n    super(props);\n\n    const now = new Date();\n\n    this.state = {\n      date: now.getDate(),\n      month: now.getMonth(),\n      today: new Date(now.getFullYear(), now.getMonth(), now.getDate()),\n      year: now.getFullYear()\n    };\n  }\n\n  static isSameDay(a, b) {\n    return (\n      a &&\n      b &&\n      a.getFullYear() === b.getFullYear() &&\n      a.getMonth() === b.getMonth() &&\n      a.getDate() === b.getDate()\n    );\n  }\n\n  get days() {\n    const { month, year } = this.state;\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    const days = [];\n    const offset = new Date(year, month, 1).getDay();\n    if (offset < 7) {\n      for (let i = 0; i < offset; i++) {\n        days.push(null);\n      }\n    }\n    for (let i = 1; i <= daysInMonth; i++) {\n      days.push(new Date(year, month, i));\n    }\n    return days;\n  }\n\n  get weeks() {\n    const days = this.days;\n    const weeks = [];\n    const weekCount = Math.ceil(days.length / 7);\n    for (let i = 0; i < weekCount; i++) {\n      weeks.push(days.slice(i * 7, (i + 1) * 7));\n    }\n    return weeks;\n  }\n\n  longMonthName(month) {\n    if (this.props.monthNames) {\n      return this.props.monthNames[month];\n    }\n\n    return MONTHS[month];\n  }\n\n  longDayName(dayOfWeek) {\n    if (this.props.longDayNames) {\n      return this.props.longDayNames[dayOfWeek];\n    }\n\n    return DAYS_LONG[dayOfWeek];\n  }\n\n  shortDayName(dayOfWeek) {\n    if (this.props.shortDayNames) {\n      return this.props.shortDayNames[dayOfWeek];\n    }\n\n    return DAYS_SHORT[dayOfWeek];\n  }\n\n  previousMonth = () => {\n    const { month, year } = this.state;\n\n    this.setState({\n      month: month !== 0 ? month - 1 : 11,\n      year: month !== 0 ? year : year - 1\n    });\n  };\n\n  nextMonth = () => {\n    const { month, year } = this.state;\n\n    this.setState({\n      month: month !== 11 ? month + 1 : 0,\n      year: month !== 11 ? year : year + 1\n    });\n  };\n\n  onDayClick = day => () => {\n    if (day) {\n      this.props.onDayClick(day);\n    }\n  };\n\n  renderDay = (day, index) => {\n    const { date, month, today, year } = this.state;\n    const { active } = this.props;\n\n    const isToday = day && day.valueOf() === today.valueOf();\n    const isActive = active && day && DayPicker.isSameDay(active, day);\n\n    return (\n      <td\n        className={[\n          \"day\",\n          isActive ? \"active\" : null,\n          !day ? \"empty\" : null,\n          isToday ? \"today\" : null\n        ]\n          .filter(v => v)\n          .join(\" \")}\n        key={`${year}.${month}.day.${index}`}\n        onClick={this.onDayClick(day)}\n      >\n        {day ? day.getDate() : \"\"}\n      </td>\n    );\n  };\n\n  renderWeek = (days, index) => {\n    const { month, year } = this.state;\n\n    return (\n      <tr key={`${year}.${month}.week.${index}`}>{days.map(this.renderDay)}</tr>\n    );\n  };\n\n  renderDayHeader(dayOfWeek) {\n    return (\n      <th scope=\"col\">\n        <abbr title={this.longDayName(dayOfWeek)}>\n          {this.shortDayName(dayOfWeek)}\n        </abbr>\n      </th>\n    );\n  }\n\n  render() {\n    const { month, year } = this.state;\n\n    return (\n      <div className=\"react-daypicker-root\">\n        <div className=\"header\">\n          <div className=\"previous-month\" onClick={this.previousMonth}>\n            ◀\n          </div>\n          <div className=\"month-year\">\n            {this.longMonthName(month)} {year}\n          </div>\n          <div className=\"next-month\" onClick={this.nextMonth}>\n            ▶\n          </div>\n        </div>\n        <table>\n          <thead>\n            <tr>\n              {this.renderDayHeader(0)}\n              {this.renderDayHeader(1)}\n              {this.renderDayHeader(2)}\n              {this.renderDayHeader(3)}\n              {this.renderDayHeader(4)}\n              {this.renderDayHeader(5)}\n              {this.renderDayHeader(6)}\n            </tr>\n          </thead>\n          <tbody>{this.weeks.map(this.renderWeek)}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n"],"mappings":"AAEA","sourceRoot":""}